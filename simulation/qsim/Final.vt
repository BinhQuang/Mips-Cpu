// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2025 19:41:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datapath_vlg_sample_tst(
	ALUOp,
	Branch,
	aluSrc,
	clk,
	condZero,
	memToReg,
	memWrite,
	pcSrc,
	regDst,
	regWrite,
	rst,
	sampler_tx
);
input [3:0] ALUOp;
input  Branch;
input  aluSrc;
input  clk;
input  condZero;
input [1:0] memToReg;
input  memWrite;
input [1:0] pcSrc;
input [1:0] regDst;
input  regWrite;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(ALUOp or Branch or aluSrc or clk or condZero or memToReg or memWrite or pcSrc or regDst or regWrite or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datapath_vlg_check_tst (
	aluZero,
	instr,
	pc,
	pcNext,
	sampler_rx
);
input  aluZero;
input [31:0] instr;
input [31:0] pc;
input [31:0] pcNext;
input sampler_rx;

reg  aluZero_expected;
reg [31:0] instr_expected;
reg [31:0] pc_expected;
reg [31:0] pcNext_expected;

reg  aluZero_prev;
reg [31:0] instr_prev;
reg [31:0] pc_prev;
reg [31:0] pcNext_prev;

reg  aluZero_expected_prev;
reg [31:0] instr_expected_prev;
reg [31:0] pc_expected_prev;
reg [31:0] pcNext_expected_prev;

reg  last_aluZero_exp;
reg [31:0] last_instr_exp;
reg [31:0] last_pc_exp;
reg [31:0] last_pcNext_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluZero_prev = aluZero;
	instr_prev = instr;
	pc_prev = pc;
	pcNext_prev = pcNext;
end

// update expected /o prevs

always @(trigger)
begin
	aluZero_expected_prev = aluZero_expected;
	instr_expected_prev = instr_expected;
	pc_expected_prev = pc_expected;
	pcNext_expected_prev = pcNext_expected;
end



// expected aluZero
initial
begin
	aluZero_expected = 1'bX;
end 
// expected instr[ 31 ]
initial
begin
	instr_expected[31] = 1'bX;
end 
// expected instr[ 30 ]
initial
begin
	instr_expected[30] = 1'bX;
end 
// expected instr[ 29 ]
initial
begin
	instr_expected[29] = 1'bX;
end 
// expected instr[ 28 ]
initial
begin
	instr_expected[28] = 1'bX;
end 
// expected instr[ 27 ]
initial
begin
	instr_expected[27] = 1'bX;
end 
// expected instr[ 26 ]
initial
begin
	instr_expected[26] = 1'bX;
end 
// expected instr[ 25 ]
initial
begin
	instr_expected[25] = 1'bX;
end 
// expected instr[ 24 ]
initial
begin
	instr_expected[24] = 1'bX;
end 
// expected instr[ 23 ]
initial
begin
	instr_expected[23] = 1'bX;
end 
// expected instr[ 22 ]
initial
begin
	instr_expected[22] = 1'bX;
end 
// expected instr[ 21 ]
initial
begin
	instr_expected[21] = 1'bX;
end 
// expected instr[ 20 ]
initial
begin
	instr_expected[20] = 1'bX;
end 
// expected instr[ 19 ]
initial
begin
	instr_expected[19] = 1'bX;
end 
// expected instr[ 18 ]
initial
begin
	instr_expected[18] = 1'bX;
end 
// expected instr[ 17 ]
initial
begin
	instr_expected[17] = 1'bX;
end 
// expected instr[ 16 ]
initial
begin
	instr_expected[16] = 1'bX;
end 
// expected instr[ 15 ]
initial
begin
	instr_expected[15] = 1'bX;
end 
// expected instr[ 14 ]
initial
begin
	instr_expected[14] = 1'bX;
end 
// expected instr[ 13 ]
initial
begin
	instr_expected[13] = 1'bX;
end 
// expected instr[ 12 ]
initial
begin
	instr_expected[12] = 1'bX;
end 
// expected instr[ 11 ]
initial
begin
	instr_expected[11] = 1'bX;
end 
// expected instr[ 10 ]
initial
begin
	instr_expected[10] = 1'bX;
end 
// expected instr[ 9 ]
initial
begin
	instr_expected[9] = 1'bX;
end 
// expected instr[ 8 ]
initial
begin
	instr_expected[8] = 1'bX;
end 
// expected instr[ 7 ]
initial
begin
	instr_expected[7] = 1'bX;
end 
// expected instr[ 6 ]
initial
begin
	instr_expected[6] = 1'bX;
end 
// expected instr[ 5 ]
initial
begin
	instr_expected[5] = 1'bX;
end 
// expected instr[ 4 ]
initial
begin
	instr_expected[4] = 1'bX;
end 
// expected instr[ 3 ]
initial
begin
	instr_expected[3] = 1'bX;
end 
// expected instr[ 2 ]
initial
begin
	instr_expected[2] = 1'bX;
end 
// expected instr[ 1 ]
initial
begin
	instr_expected[1] = 1'bX;
end 
// expected instr[ 0 ]
initial
begin
	instr_expected[0] = 1'bX;
end 
// expected pc[ 31 ]
initial
begin
	pc_expected[31] = 1'bX;
end 
// expected pc[ 30 ]
initial
begin
	pc_expected[30] = 1'bX;
end 
// expected pc[ 29 ]
initial
begin
	pc_expected[29] = 1'bX;
end 
// expected pc[ 28 ]
initial
begin
	pc_expected[28] = 1'bX;
end 
// expected pc[ 27 ]
initial
begin
	pc_expected[27] = 1'bX;
end 
// expected pc[ 26 ]
initial
begin
	pc_expected[26] = 1'bX;
end 
// expected pc[ 25 ]
initial
begin
	pc_expected[25] = 1'bX;
end 
// expected pc[ 24 ]
initial
begin
	pc_expected[24] = 1'bX;
end 
// expected pc[ 23 ]
initial
begin
	pc_expected[23] = 1'bX;
end 
// expected pc[ 22 ]
initial
begin
	pc_expected[22] = 1'bX;
end 
// expected pc[ 21 ]
initial
begin
	pc_expected[21] = 1'bX;
end 
// expected pc[ 20 ]
initial
begin
	pc_expected[20] = 1'bX;
end 
// expected pc[ 19 ]
initial
begin
	pc_expected[19] = 1'bX;
end 
// expected pc[ 18 ]
initial
begin
	pc_expected[18] = 1'bX;
end 
// expected pc[ 17 ]
initial
begin
	pc_expected[17] = 1'bX;
end 
// expected pc[ 16 ]
initial
begin
	pc_expected[16] = 1'bX;
end 
// expected pc[ 15 ]
initial
begin
	pc_expected[15] = 1'bX;
end 
// expected pc[ 14 ]
initial
begin
	pc_expected[14] = 1'bX;
end 
// expected pc[ 13 ]
initial
begin
	pc_expected[13] = 1'bX;
end 
// expected pc[ 12 ]
initial
begin
	pc_expected[12] = 1'bX;
end 
// expected pc[ 11 ]
initial
begin
	pc_expected[11] = 1'bX;
end 
// expected pc[ 10 ]
initial
begin
	pc_expected[10] = 1'bX;
end 
// expected pc[ 9 ]
initial
begin
	pc_expected[9] = 1'bX;
end 
// expected pc[ 8 ]
initial
begin
	pc_expected[8] = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// expected pcNext[ 31 ]
initial
begin
	pcNext_expected[31] = 1'bX;
end 
// expected pcNext[ 30 ]
initial
begin
	pcNext_expected[30] = 1'bX;
end 
// expected pcNext[ 29 ]
initial
begin
	pcNext_expected[29] = 1'bX;
end 
// expected pcNext[ 28 ]
initial
begin
	pcNext_expected[28] = 1'bX;
end 
// expected pcNext[ 27 ]
initial
begin
	pcNext_expected[27] = 1'bX;
end 
// expected pcNext[ 26 ]
initial
begin
	pcNext_expected[26] = 1'bX;
end 
// expected pcNext[ 25 ]
initial
begin
	pcNext_expected[25] = 1'bX;
end 
// expected pcNext[ 24 ]
initial
begin
	pcNext_expected[24] = 1'bX;
end 
// expected pcNext[ 23 ]
initial
begin
	pcNext_expected[23] = 1'bX;
end 
// expected pcNext[ 22 ]
initial
begin
	pcNext_expected[22] = 1'bX;
end 
// expected pcNext[ 21 ]
initial
begin
	pcNext_expected[21] = 1'bX;
end 
// expected pcNext[ 20 ]
initial
begin
	pcNext_expected[20] = 1'bX;
end 
// expected pcNext[ 19 ]
initial
begin
	pcNext_expected[19] = 1'bX;
end 
// expected pcNext[ 18 ]
initial
begin
	pcNext_expected[18] = 1'bX;
end 
// expected pcNext[ 17 ]
initial
begin
	pcNext_expected[17] = 1'bX;
end 
// expected pcNext[ 16 ]
initial
begin
	pcNext_expected[16] = 1'bX;
end 
// expected pcNext[ 15 ]
initial
begin
	pcNext_expected[15] = 1'bX;
end 
// expected pcNext[ 14 ]
initial
begin
	pcNext_expected[14] = 1'bX;
end 
// expected pcNext[ 13 ]
initial
begin
	pcNext_expected[13] = 1'bX;
end 
// expected pcNext[ 12 ]
initial
begin
	pcNext_expected[12] = 1'bX;
end 
// expected pcNext[ 11 ]
initial
begin
	pcNext_expected[11] = 1'bX;
end 
// expected pcNext[ 10 ]
initial
begin
	pcNext_expected[10] = 1'bX;
end 
// expected pcNext[ 9 ]
initial
begin
	pcNext_expected[9] = 1'bX;
end 
// expected pcNext[ 8 ]
initial
begin
	pcNext_expected[8] = 1'bX;
end 
// expected pcNext[ 7 ]
initial
begin
	pcNext_expected[7] = 1'bX;
end 
// expected pcNext[ 6 ]
initial
begin
	pcNext_expected[6] = 1'bX;
end 
// expected pcNext[ 5 ]
initial
begin
	pcNext_expected[5] = 1'bX;
end 
// expected pcNext[ 4 ]
initial
begin
	pcNext_expected[4] = 1'bX;
end 
// expected pcNext[ 3 ]
initial
begin
	pcNext_expected[3] = 1'bX;
end 
// expected pcNext[ 2 ]
initial
begin
	pcNext_expected[2] = 1'bX;
end 
// expected pcNext[ 1 ]
initial
begin
	pcNext_expected[1] = 1'bX;
end 
// expected pcNext[ 0 ]
initial
begin
	pcNext_expected[0] = 1'bX;
end 
// generate trigger
always @(aluZero_expected or aluZero or instr_expected or instr or pc_expected or pc or pcNext_expected or pcNext)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluZero = %b | expected instr = %b | expected pc = %b | expected pcNext = %b | ",aluZero_expected_prev,instr_expected_prev,pc_expected_prev,pcNext_expected_prev);
	$display("| real aluZero = %b | real instr = %b | real pc = %b | real pcNext = %b | ",aluZero_prev,instr_prev,pc_prev,pcNext_prev);
`endif
	if (
		( aluZero_expected_prev !== 1'bx ) && ( aluZero_prev !== aluZero_expected_prev )
		&& ((aluZero_expected_prev !== last_aluZero_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluZero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluZero_expected_prev);
		$display ("     Real value = %b", aluZero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluZero_exp = aluZero_expected_prev;
	end
	if (
		( instr_expected_prev[0] !== 1'bx ) && ( instr_prev[0] !== instr_expected_prev[0] )
		&& ((instr_expected_prev[0] !== last_instr_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[0] = instr_expected_prev[0];
	end
	if (
		( instr_expected_prev[1] !== 1'bx ) && ( instr_prev[1] !== instr_expected_prev[1] )
		&& ((instr_expected_prev[1] !== last_instr_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[1] = instr_expected_prev[1];
	end
	if (
		( instr_expected_prev[2] !== 1'bx ) && ( instr_prev[2] !== instr_expected_prev[2] )
		&& ((instr_expected_prev[2] !== last_instr_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[2] = instr_expected_prev[2];
	end
	if (
		( instr_expected_prev[3] !== 1'bx ) && ( instr_prev[3] !== instr_expected_prev[3] )
		&& ((instr_expected_prev[3] !== last_instr_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[3] = instr_expected_prev[3];
	end
	if (
		( instr_expected_prev[4] !== 1'bx ) && ( instr_prev[4] !== instr_expected_prev[4] )
		&& ((instr_expected_prev[4] !== last_instr_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[4] = instr_expected_prev[4];
	end
	if (
		( instr_expected_prev[5] !== 1'bx ) && ( instr_prev[5] !== instr_expected_prev[5] )
		&& ((instr_expected_prev[5] !== last_instr_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[5] = instr_expected_prev[5];
	end
	if (
		( instr_expected_prev[6] !== 1'bx ) && ( instr_prev[6] !== instr_expected_prev[6] )
		&& ((instr_expected_prev[6] !== last_instr_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[6] = instr_expected_prev[6];
	end
	if (
		( instr_expected_prev[7] !== 1'bx ) && ( instr_prev[7] !== instr_expected_prev[7] )
		&& ((instr_expected_prev[7] !== last_instr_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[7] = instr_expected_prev[7];
	end
	if (
		( instr_expected_prev[8] !== 1'bx ) && ( instr_prev[8] !== instr_expected_prev[8] )
		&& ((instr_expected_prev[8] !== last_instr_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[8] = instr_expected_prev[8];
	end
	if (
		( instr_expected_prev[9] !== 1'bx ) && ( instr_prev[9] !== instr_expected_prev[9] )
		&& ((instr_expected_prev[9] !== last_instr_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[9] = instr_expected_prev[9];
	end
	if (
		( instr_expected_prev[10] !== 1'bx ) && ( instr_prev[10] !== instr_expected_prev[10] )
		&& ((instr_expected_prev[10] !== last_instr_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[10] = instr_expected_prev[10];
	end
	if (
		( instr_expected_prev[11] !== 1'bx ) && ( instr_prev[11] !== instr_expected_prev[11] )
		&& ((instr_expected_prev[11] !== last_instr_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[11] = instr_expected_prev[11];
	end
	if (
		( instr_expected_prev[12] !== 1'bx ) && ( instr_prev[12] !== instr_expected_prev[12] )
		&& ((instr_expected_prev[12] !== last_instr_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[12] = instr_expected_prev[12];
	end
	if (
		( instr_expected_prev[13] !== 1'bx ) && ( instr_prev[13] !== instr_expected_prev[13] )
		&& ((instr_expected_prev[13] !== last_instr_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[13] = instr_expected_prev[13];
	end
	if (
		( instr_expected_prev[14] !== 1'bx ) && ( instr_prev[14] !== instr_expected_prev[14] )
		&& ((instr_expected_prev[14] !== last_instr_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[14] = instr_expected_prev[14];
	end
	if (
		( instr_expected_prev[15] !== 1'bx ) && ( instr_prev[15] !== instr_expected_prev[15] )
		&& ((instr_expected_prev[15] !== last_instr_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[15] = instr_expected_prev[15];
	end
	if (
		( instr_expected_prev[16] !== 1'bx ) && ( instr_prev[16] !== instr_expected_prev[16] )
		&& ((instr_expected_prev[16] !== last_instr_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[16] = instr_expected_prev[16];
	end
	if (
		( instr_expected_prev[17] !== 1'bx ) && ( instr_prev[17] !== instr_expected_prev[17] )
		&& ((instr_expected_prev[17] !== last_instr_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[17] = instr_expected_prev[17];
	end
	if (
		( instr_expected_prev[18] !== 1'bx ) && ( instr_prev[18] !== instr_expected_prev[18] )
		&& ((instr_expected_prev[18] !== last_instr_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[18] = instr_expected_prev[18];
	end
	if (
		( instr_expected_prev[19] !== 1'bx ) && ( instr_prev[19] !== instr_expected_prev[19] )
		&& ((instr_expected_prev[19] !== last_instr_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[19] = instr_expected_prev[19];
	end
	if (
		( instr_expected_prev[20] !== 1'bx ) && ( instr_prev[20] !== instr_expected_prev[20] )
		&& ((instr_expected_prev[20] !== last_instr_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[20] = instr_expected_prev[20];
	end
	if (
		( instr_expected_prev[21] !== 1'bx ) && ( instr_prev[21] !== instr_expected_prev[21] )
		&& ((instr_expected_prev[21] !== last_instr_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[21] = instr_expected_prev[21];
	end
	if (
		( instr_expected_prev[22] !== 1'bx ) && ( instr_prev[22] !== instr_expected_prev[22] )
		&& ((instr_expected_prev[22] !== last_instr_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[22] = instr_expected_prev[22];
	end
	if (
		( instr_expected_prev[23] !== 1'bx ) && ( instr_prev[23] !== instr_expected_prev[23] )
		&& ((instr_expected_prev[23] !== last_instr_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[23] = instr_expected_prev[23];
	end
	if (
		( instr_expected_prev[24] !== 1'bx ) && ( instr_prev[24] !== instr_expected_prev[24] )
		&& ((instr_expected_prev[24] !== last_instr_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[24] = instr_expected_prev[24];
	end
	if (
		( instr_expected_prev[25] !== 1'bx ) && ( instr_prev[25] !== instr_expected_prev[25] )
		&& ((instr_expected_prev[25] !== last_instr_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[25] = instr_expected_prev[25];
	end
	if (
		( instr_expected_prev[26] !== 1'bx ) && ( instr_prev[26] !== instr_expected_prev[26] )
		&& ((instr_expected_prev[26] !== last_instr_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[26] = instr_expected_prev[26];
	end
	if (
		( instr_expected_prev[27] !== 1'bx ) && ( instr_prev[27] !== instr_expected_prev[27] )
		&& ((instr_expected_prev[27] !== last_instr_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[27] = instr_expected_prev[27];
	end
	if (
		( instr_expected_prev[28] !== 1'bx ) && ( instr_prev[28] !== instr_expected_prev[28] )
		&& ((instr_expected_prev[28] !== last_instr_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[28] = instr_expected_prev[28];
	end
	if (
		( instr_expected_prev[29] !== 1'bx ) && ( instr_prev[29] !== instr_expected_prev[29] )
		&& ((instr_expected_prev[29] !== last_instr_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[29] = instr_expected_prev[29];
	end
	if (
		( instr_expected_prev[30] !== 1'bx ) && ( instr_prev[30] !== instr_expected_prev[30] )
		&& ((instr_expected_prev[30] !== last_instr_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[30] = instr_expected_prev[30];
	end
	if (
		( instr_expected_prev[31] !== 1'bx ) && ( instr_prev[31] !== instr_expected_prev[31] )
		&& ((instr_expected_prev[31] !== last_instr_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_instr_exp[31] = instr_expected_prev[31];
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( pc_expected_prev[8] !== 1'bx ) && ( pc_prev[8] !== pc_expected_prev[8] )
		&& ((pc_expected_prev[8] !== last_pc_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[8] = pc_expected_prev[8];
	end
	if (
		( pc_expected_prev[9] !== 1'bx ) && ( pc_prev[9] !== pc_expected_prev[9] )
		&& ((pc_expected_prev[9] !== last_pc_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[9] = pc_expected_prev[9];
	end
	if (
		( pc_expected_prev[10] !== 1'bx ) && ( pc_prev[10] !== pc_expected_prev[10] )
		&& ((pc_expected_prev[10] !== last_pc_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[10] = pc_expected_prev[10];
	end
	if (
		( pc_expected_prev[11] !== 1'bx ) && ( pc_prev[11] !== pc_expected_prev[11] )
		&& ((pc_expected_prev[11] !== last_pc_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[11] = pc_expected_prev[11];
	end
	if (
		( pc_expected_prev[12] !== 1'bx ) && ( pc_prev[12] !== pc_expected_prev[12] )
		&& ((pc_expected_prev[12] !== last_pc_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[12] = pc_expected_prev[12];
	end
	if (
		( pc_expected_prev[13] !== 1'bx ) && ( pc_prev[13] !== pc_expected_prev[13] )
		&& ((pc_expected_prev[13] !== last_pc_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[13] = pc_expected_prev[13];
	end
	if (
		( pc_expected_prev[14] !== 1'bx ) && ( pc_prev[14] !== pc_expected_prev[14] )
		&& ((pc_expected_prev[14] !== last_pc_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[14] = pc_expected_prev[14];
	end
	if (
		( pc_expected_prev[15] !== 1'bx ) && ( pc_prev[15] !== pc_expected_prev[15] )
		&& ((pc_expected_prev[15] !== last_pc_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[15] = pc_expected_prev[15];
	end
	if (
		( pc_expected_prev[16] !== 1'bx ) && ( pc_prev[16] !== pc_expected_prev[16] )
		&& ((pc_expected_prev[16] !== last_pc_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[16] = pc_expected_prev[16];
	end
	if (
		( pc_expected_prev[17] !== 1'bx ) && ( pc_prev[17] !== pc_expected_prev[17] )
		&& ((pc_expected_prev[17] !== last_pc_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[17] = pc_expected_prev[17];
	end
	if (
		( pc_expected_prev[18] !== 1'bx ) && ( pc_prev[18] !== pc_expected_prev[18] )
		&& ((pc_expected_prev[18] !== last_pc_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[18] = pc_expected_prev[18];
	end
	if (
		( pc_expected_prev[19] !== 1'bx ) && ( pc_prev[19] !== pc_expected_prev[19] )
		&& ((pc_expected_prev[19] !== last_pc_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[19] = pc_expected_prev[19];
	end
	if (
		( pc_expected_prev[20] !== 1'bx ) && ( pc_prev[20] !== pc_expected_prev[20] )
		&& ((pc_expected_prev[20] !== last_pc_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[20] = pc_expected_prev[20];
	end
	if (
		( pc_expected_prev[21] !== 1'bx ) && ( pc_prev[21] !== pc_expected_prev[21] )
		&& ((pc_expected_prev[21] !== last_pc_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[21] = pc_expected_prev[21];
	end
	if (
		( pc_expected_prev[22] !== 1'bx ) && ( pc_prev[22] !== pc_expected_prev[22] )
		&& ((pc_expected_prev[22] !== last_pc_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[22] = pc_expected_prev[22];
	end
	if (
		( pc_expected_prev[23] !== 1'bx ) && ( pc_prev[23] !== pc_expected_prev[23] )
		&& ((pc_expected_prev[23] !== last_pc_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[23] = pc_expected_prev[23];
	end
	if (
		( pc_expected_prev[24] !== 1'bx ) && ( pc_prev[24] !== pc_expected_prev[24] )
		&& ((pc_expected_prev[24] !== last_pc_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[24] = pc_expected_prev[24];
	end
	if (
		( pc_expected_prev[25] !== 1'bx ) && ( pc_prev[25] !== pc_expected_prev[25] )
		&& ((pc_expected_prev[25] !== last_pc_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[25] = pc_expected_prev[25];
	end
	if (
		( pc_expected_prev[26] !== 1'bx ) && ( pc_prev[26] !== pc_expected_prev[26] )
		&& ((pc_expected_prev[26] !== last_pc_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[26] = pc_expected_prev[26];
	end
	if (
		( pc_expected_prev[27] !== 1'bx ) && ( pc_prev[27] !== pc_expected_prev[27] )
		&& ((pc_expected_prev[27] !== last_pc_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[27] = pc_expected_prev[27];
	end
	if (
		( pc_expected_prev[28] !== 1'bx ) && ( pc_prev[28] !== pc_expected_prev[28] )
		&& ((pc_expected_prev[28] !== last_pc_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[28] = pc_expected_prev[28];
	end
	if (
		( pc_expected_prev[29] !== 1'bx ) && ( pc_prev[29] !== pc_expected_prev[29] )
		&& ((pc_expected_prev[29] !== last_pc_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[29] = pc_expected_prev[29];
	end
	if (
		( pc_expected_prev[30] !== 1'bx ) && ( pc_prev[30] !== pc_expected_prev[30] )
		&& ((pc_expected_prev[30] !== last_pc_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[30] = pc_expected_prev[30];
	end
	if (
		( pc_expected_prev[31] !== 1'bx ) && ( pc_prev[31] !== pc_expected_prev[31] )
		&& ((pc_expected_prev[31] !== last_pc_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pc_exp[31] = pc_expected_prev[31];
	end
	if (
		( pcNext_expected_prev[0] !== 1'bx ) && ( pcNext_prev[0] !== pcNext_expected_prev[0] )
		&& ((pcNext_expected_prev[0] !== last_pcNext_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[0] = pcNext_expected_prev[0];
	end
	if (
		( pcNext_expected_prev[1] !== 1'bx ) && ( pcNext_prev[1] !== pcNext_expected_prev[1] )
		&& ((pcNext_expected_prev[1] !== last_pcNext_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[1] = pcNext_expected_prev[1];
	end
	if (
		( pcNext_expected_prev[2] !== 1'bx ) && ( pcNext_prev[2] !== pcNext_expected_prev[2] )
		&& ((pcNext_expected_prev[2] !== last_pcNext_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[2] = pcNext_expected_prev[2];
	end
	if (
		( pcNext_expected_prev[3] !== 1'bx ) && ( pcNext_prev[3] !== pcNext_expected_prev[3] )
		&& ((pcNext_expected_prev[3] !== last_pcNext_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[3] = pcNext_expected_prev[3];
	end
	if (
		( pcNext_expected_prev[4] !== 1'bx ) && ( pcNext_prev[4] !== pcNext_expected_prev[4] )
		&& ((pcNext_expected_prev[4] !== last_pcNext_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[4] = pcNext_expected_prev[4];
	end
	if (
		( pcNext_expected_prev[5] !== 1'bx ) && ( pcNext_prev[5] !== pcNext_expected_prev[5] )
		&& ((pcNext_expected_prev[5] !== last_pcNext_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[5] = pcNext_expected_prev[5];
	end
	if (
		( pcNext_expected_prev[6] !== 1'bx ) && ( pcNext_prev[6] !== pcNext_expected_prev[6] )
		&& ((pcNext_expected_prev[6] !== last_pcNext_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[6] = pcNext_expected_prev[6];
	end
	if (
		( pcNext_expected_prev[7] !== 1'bx ) && ( pcNext_prev[7] !== pcNext_expected_prev[7] )
		&& ((pcNext_expected_prev[7] !== last_pcNext_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[7] = pcNext_expected_prev[7];
	end
	if (
		( pcNext_expected_prev[8] !== 1'bx ) && ( pcNext_prev[8] !== pcNext_expected_prev[8] )
		&& ((pcNext_expected_prev[8] !== last_pcNext_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[8] = pcNext_expected_prev[8];
	end
	if (
		( pcNext_expected_prev[9] !== 1'bx ) && ( pcNext_prev[9] !== pcNext_expected_prev[9] )
		&& ((pcNext_expected_prev[9] !== last_pcNext_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[9] = pcNext_expected_prev[9];
	end
	if (
		( pcNext_expected_prev[10] !== 1'bx ) && ( pcNext_prev[10] !== pcNext_expected_prev[10] )
		&& ((pcNext_expected_prev[10] !== last_pcNext_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[10] = pcNext_expected_prev[10];
	end
	if (
		( pcNext_expected_prev[11] !== 1'bx ) && ( pcNext_prev[11] !== pcNext_expected_prev[11] )
		&& ((pcNext_expected_prev[11] !== last_pcNext_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[11] = pcNext_expected_prev[11];
	end
	if (
		( pcNext_expected_prev[12] !== 1'bx ) && ( pcNext_prev[12] !== pcNext_expected_prev[12] )
		&& ((pcNext_expected_prev[12] !== last_pcNext_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[12] = pcNext_expected_prev[12];
	end
	if (
		( pcNext_expected_prev[13] !== 1'bx ) && ( pcNext_prev[13] !== pcNext_expected_prev[13] )
		&& ((pcNext_expected_prev[13] !== last_pcNext_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[13] = pcNext_expected_prev[13];
	end
	if (
		( pcNext_expected_prev[14] !== 1'bx ) && ( pcNext_prev[14] !== pcNext_expected_prev[14] )
		&& ((pcNext_expected_prev[14] !== last_pcNext_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[14] = pcNext_expected_prev[14];
	end
	if (
		( pcNext_expected_prev[15] !== 1'bx ) && ( pcNext_prev[15] !== pcNext_expected_prev[15] )
		&& ((pcNext_expected_prev[15] !== last_pcNext_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[15] = pcNext_expected_prev[15];
	end
	if (
		( pcNext_expected_prev[16] !== 1'bx ) && ( pcNext_prev[16] !== pcNext_expected_prev[16] )
		&& ((pcNext_expected_prev[16] !== last_pcNext_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[16] = pcNext_expected_prev[16];
	end
	if (
		( pcNext_expected_prev[17] !== 1'bx ) && ( pcNext_prev[17] !== pcNext_expected_prev[17] )
		&& ((pcNext_expected_prev[17] !== last_pcNext_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[17] = pcNext_expected_prev[17];
	end
	if (
		( pcNext_expected_prev[18] !== 1'bx ) && ( pcNext_prev[18] !== pcNext_expected_prev[18] )
		&& ((pcNext_expected_prev[18] !== last_pcNext_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[18] = pcNext_expected_prev[18];
	end
	if (
		( pcNext_expected_prev[19] !== 1'bx ) && ( pcNext_prev[19] !== pcNext_expected_prev[19] )
		&& ((pcNext_expected_prev[19] !== last_pcNext_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[19] = pcNext_expected_prev[19];
	end
	if (
		( pcNext_expected_prev[20] !== 1'bx ) && ( pcNext_prev[20] !== pcNext_expected_prev[20] )
		&& ((pcNext_expected_prev[20] !== last_pcNext_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[20] = pcNext_expected_prev[20];
	end
	if (
		( pcNext_expected_prev[21] !== 1'bx ) && ( pcNext_prev[21] !== pcNext_expected_prev[21] )
		&& ((pcNext_expected_prev[21] !== last_pcNext_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[21] = pcNext_expected_prev[21];
	end
	if (
		( pcNext_expected_prev[22] !== 1'bx ) && ( pcNext_prev[22] !== pcNext_expected_prev[22] )
		&& ((pcNext_expected_prev[22] !== last_pcNext_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[22] = pcNext_expected_prev[22];
	end
	if (
		( pcNext_expected_prev[23] !== 1'bx ) && ( pcNext_prev[23] !== pcNext_expected_prev[23] )
		&& ((pcNext_expected_prev[23] !== last_pcNext_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[23] = pcNext_expected_prev[23];
	end
	if (
		( pcNext_expected_prev[24] !== 1'bx ) && ( pcNext_prev[24] !== pcNext_expected_prev[24] )
		&& ((pcNext_expected_prev[24] !== last_pcNext_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[24] = pcNext_expected_prev[24];
	end
	if (
		( pcNext_expected_prev[25] !== 1'bx ) && ( pcNext_prev[25] !== pcNext_expected_prev[25] )
		&& ((pcNext_expected_prev[25] !== last_pcNext_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[25] = pcNext_expected_prev[25];
	end
	if (
		( pcNext_expected_prev[26] !== 1'bx ) && ( pcNext_prev[26] !== pcNext_expected_prev[26] )
		&& ((pcNext_expected_prev[26] !== last_pcNext_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[26] = pcNext_expected_prev[26];
	end
	if (
		( pcNext_expected_prev[27] !== 1'bx ) && ( pcNext_prev[27] !== pcNext_expected_prev[27] )
		&& ((pcNext_expected_prev[27] !== last_pcNext_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[27] = pcNext_expected_prev[27];
	end
	if (
		( pcNext_expected_prev[28] !== 1'bx ) && ( pcNext_prev[28] !== pcNext_expected_prev[28] )
		&& ((pcNext_expected_prev[28] !== last_pcNext_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[28] = pcNext_expected_prev[28];
	end
	if (
		( pcNext_expected_prev[29] !== 1'bx ) && ( pcNext_prev[29] !== pcNext_expected_prev[29] )
		&& ((pcNext_expected_prev[29] !== last_pcNext_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[29] = pcNext_expected_prev[29];
	end
	if (
		( pcNext_expected_prev[30] !== 1'bx ) && ( pcNext_prev[30] !== pcNext_expected_prev[30] )
		&& ((pcNext_expected_prev[30] !== last_pcNext_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[30] = pcNext_expected_prev[30];
	end
	if (
		( pcNext_expected_prev[31] !== 1'bx ) && ( pcNext_prev[31] !== pcNext_expected_prev[31] )
		&& ((pcNext_expected_prev[31] !== last_pcNext_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcNext[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcNext_expected_prev);
		$display ("     Real value = %b", pcNext_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pcNext_exp[31] = pcNext_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ALUOp;
reg Branch;
reg aluSrc;
reg clk;
reg condZero;
reg [1:0] memToReg;
reg memWrite;
reg [1:0] pcSrc;
reg [1:0] regDst;
reg regWrite;
reg rst;
// wires                                               
wire aluZero;
wire [31:0] instr;
wire [31:0] pc;
wire [31:0] pcNext;

wire sampler;                             

// assign statements (if any)                          
Datapath i1 (
// port map - connection between master ports and signals/registers   
	.ALUOp(ALUOp),
	.Branch(Branch),
	.aluSrc(aluSrc),
	.aluZero(aluZero),
	.clk(clk),
	.condZero(condZero),
	.instr(instr),
	.memToReg(memToReg),
	.memWrite(memWrite),
	.pc(pc),
	.pcNext(pcNext),
	.pcSrc(pcSrc),
	.regDst(regDst),
	.regWrite(regWrite),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// ALUOp[ 3 ]
initial
begin
	ALUOp[3] = 1'b0;
end 
// ALUOp[ 2 ]
initial
begin
	ALUOp[2] = 1'b0;
end 
// ALUOp[ 1 ]
initial
begin
	ALUOp[1] = 1'b0;
end 
// ALUOp[ 0 ]
initial
begin
	ALUOp[0] = 1'b0;
end 

// Branch
initial
begin
	Branch = 1'b0;
end 

// aluSrc
initial
begin
	aluSrc = 1'b0;
end 

// condZero
initial
begin
	condZero = 1'b0;
end 
// memToReg[ 1 ]
initial
begin
	memToReg[1] = 1'b0;
end 
// memToReg[ 0 ]
initial
begin
	memToReg[0] = 1'b0;
end 

// memWrite
initial
begin
	memWrite = 1'b0;
end 
// pcSrc[ 1 ]
initial
begin
	pcSrc[1] = 1'b0;
end 
// pcSrc[ 0 ]
initial
begin
	pcSrc[0] = 1'b0;
end 
// regDst[ 1 ]
initial
begin
	regDst[1] = 1'b0;
end 
// regDst[ 0 ]
initial
begin
	regDst[0] = 1'b0;
end 

// regWrite
initial
begin
	regWrite = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

Datapath_vlg_sample_tst tb_sample (
	.ALUOp(ALUOp),
	.Branch(Branch),
	.aluSrc(aluSrc),
	.clk(clk),
	.condZero(condZero),
	.memToReg(memToReg),
	.memWrite(memWrite),
	.pcSrc(pcSrc),
	.regDst(regDst),
	.regWrite(regWrite),
	.rst(rst),
	.sampler_tx(sampler)
);

Datapath_vlg_check_tst tb_out(
	.aluZero(aluZero),
	.instr(instr),
	.pc(pc),
	.pcNext(pcNext),
	.sampler_rx(sampler)
);
endmodule

